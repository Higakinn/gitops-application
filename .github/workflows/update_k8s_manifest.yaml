name: GitOps-Demo CI 

on: push
env: # global環境変数を設定
  CR_NAME: ${{ secrets.CONTAINER_REGISTORY_NAME }}
  CR_USER: ${{ secrets.CONTAINER_REGISTORY_USER }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  GH_WORKDIR: manifest
  GH_REPOSITORY: ${{ secrets.GH_REPOSITORY }}
jobs:
  push_docker_image:
    if: contains( github.ref, 'release') #developブランチにpushされたときに実行する
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout current branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Build docker image
        run: docker build -t $IMAGE_NAME -f ./docker/Dockerfile . 
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTORY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Push Docker image to Container Registry
        run: |  
            IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s#refs/heads/release/##g")
            IMAGE_NAME_WITH_CR="${CR_NAME}/${CR_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
            docker tag $IMAGE_NAME "${IMAGE_NAME_WITH_CR}"
            docker push "${IMAGE_NAME_WITH_CR}"
  open_pull_request:
    if: contains( github.ref, 'release') #developブランチにpushされたときに実行する
    runs-on: ubuntu-latest
    needs: push_docker_image
    defaults:
      run:
        working-directory: $GH_WORKDIR
    steps:
      - name: Checkout Manifest Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.GH_REPOSITORY }}
          path: $GH_WORKDIR
          token: ${{ secrets.PAT }}
      - name: SetUp Git
        id: config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git remote set-url origin "https://github.com/${GH_REPOSITORY}.git"
          git fetch
          git checkout -b prtest/${{ github.sha }} origin/prtest/${{ github.sha  }} || git checkout -b prtest/${{ github.sha }}
          IMAGE_TAG=$(echo ${{ github.ref }} | sed -e "s#refs/heads/release/##g")
          echo "::set-output name=RELEASE_VERSION::${IMAGE_TAG}"
      - name: Update K8s Manifest
        run: | 
          # yq コマンドのinstall
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
          IMAGE_NAME_WITH_CR="${CR_NAME}/${CR_USER}/${IMAGE_NAME}:${{steps.config.outputs.RELEASE_VERSION}}"
          yq eval --inplace ".spec.template.spec.containers[0].image=\"${IMAGE_NAME_WITH_CR}\"" './staging/deployment.yaml'
          cat ./staging/deployment.yaml
      - name: Create Pull-Requset
        run: |
          # git config --global user.email "action@github.com"
          # git config --global user.name "GitHub Action"
          # git remote set-url origin "https://github.com/${GH_REPOSITORY}.git"
          git add .
          git commit -m "update docker image version ${RELEASE_VERSION} in k8s manifest" || :
          git push --set-upstream origin ${BRANCH_NAME}
          hub pull-request -b main -m "Release" || :
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          RELEASE_VERSION: ${{steps.config.outputs.RELEASE_VERSION}}
          BRANCH_NAME: prtest/${{ github.sha }}
